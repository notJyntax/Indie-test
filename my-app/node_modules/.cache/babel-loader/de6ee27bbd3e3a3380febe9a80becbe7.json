{"ast":null,"code":"var _jsxFileName = \"/Users/jeaney/Desktop/project/JJin/indie-test/my-app/src/Components/Quiz2.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useEffect, useRef } from 'react';\nimport { QuizContext } from '../Helpers/Contexts';\nimport { Questions } from '../Helpers/QuestionBank';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const {\n    score,\n    setScore,\n    setGameState\n  } = useContext(QuizContext);\n  const [currQuestion, setCurrQuestion] = useState(0);\n  const imgSrc = Questions[currQuestion].image;\n\n  const handleAnswer = e => {\n    setCurrQuestion(currQuestion + 1);\n    const optionChosen = e.target.innerText;\n\n    if (optionChosen === Questions[currQuestion].answer) {\n      setScore(score + 1);\n    }\n\n    if (currQuestion === Questions.length - 1) finishQuiz();\n  };\n\n  const finishQuiz = () => {\n    setGameState(\"result\");\n  }; // const intervalRef = useRef(null)\n  // const [timer, setTimer] = useState('00:00:00')\n  // function getTimeRemaining(endtime){\n  //   const total = Date.parse(endtime) - Date.parse(new Date())\n  //   const seconds = Math.floor( (total/1000)%60)\n  //   const minutes = Math.floor( (total/1000/60)%60)\n  //   const hours = Math.floor( (total/1000*60*60)%24)\n  //   const days= Math.floor( total/(1000*60*60*24))\n  //   return(\n  //     total, days, hours, minutes, seconds\n  //   )\n  // }\n  // function startTimer(deadline){\n  //   let { total, days, hours, minutes, seconds } = getTimeRemaining(deadline)\n  //   if(total >= 0){\n  //     setTimer(\n  //       (hours > 9 ? hours : '0'+hours) + ':' +\n  //       (minutes > 9 ? minutes : '0'+minutes) + ':' +\n  //       (seconds > 9 ? seconds : '0'+seconds)\n  //     )\n  //   }else{\n  //     clearInterval(intervalRef.current)\n  //   }\n  // }\n  // function clearTimer(endtime){\n  //   setTimer('00:00:10')\n  //   if(intervalRef.current) clearInterval(intervalRef.current)\n  //   const id = setInterval(()=>{\n  //     startTimer(endtime)\n  //   }, 1000)\n  //   intervalRef.current = id\n  // }\n  // function getDeadlineTime(){\n  //   let deadline = new Date()\n  //   deadline.setSeconds(deadline.getSeconds() + 10)\n  //   return deadline\n  // }\n  // useEffect(()=>{\n  //   clearTimer(getDeadlineTime())\n  //   return() => {if(intervalRef.current) clearInterval(intervalRef.current)}\n  // }, [])\n  // function onClickResetBtn(){\n  //   if(intervalRef.current) clearInterval(intervalRef.current)\n  //   clearTimer(getDeadlineTime())\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Quiz\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Timer\",\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickResetBtn,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"QuizText\",\n      children: Questions[currQuestion].q\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Image\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imgSrc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Options\",\n      children: Questions[currQuestion].options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAnswer,\n        children: option\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Quiz, \"9qM9vDtrXLi7wE+KqMUyT9p9Gsk=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/Users/jeaney/Desktop/project/JJin/indie-test/my-app/src/Components/Quiz2.js"],"names":["useState","useContext","useEffect","useRef","QuizContext","Questions","Quiz","score","setScore","setGameState","currQuestion","setCurrQuestion","imgSrc","image","handleAnswer","e","optionChosen","target","innerText","answer","length","finishQuiz","timer","onClickResetBtn","q","options","map","option"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,UAAlB,EAA8BC,SAA9B,EAAyCC,MAAzC,QAAsD,OAAtD;AACA,SAAQC,WAAR,QAA0B,qBAA1B;AACA,SAAQC,SAAR,QAAwB,yBAAxB;;AAEA,eAAe,SAASC,IAAT,GAAe;AAAA;;AAC5B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,MAAoCR,UAAU,CAACG,WAAD,CAApD;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAMY,MAAM,GAAGP,SAAS,CAACK,YAAD,CAAT,CAAwBG,KAAvC;;AAEA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1BJ,IAAAA,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AACA,UAAMM,YAAY,GAAGD,CAAC,CAACE,MAAF,CAASC,SAA9B;;AACA,QAAGF,YAAY,KAAKX,SAAS,CAACK,YAAD,CAAT,CAAwBS,MAA5C,EAAoD;AAClDX,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AACD,QAAGG,YAAY,KAAKL,SAAS,CAACe,MAAV,GAAmB,CAAvC,EAA0CC,UAAU;AACrD,GAPD;;AASA,QAAMA,UAAU,GAAG,MAAM;AACvBZ,IAAAA,YAAY,CAAC,QAAD,CAAZ;AACD,GAFD,CAd4B,CAkB5B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBAAwBa;AAAxB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEC,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BlB,SAAS,CAACK,YAAD,CAAT,CAAwBc;AAAlD;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,6BACE;AAAK,QAAA,GAAG,EAAEZ;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF,eAOE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACGP,SAAS,CAACK,YAAD,CAAT,CAAwBe,OAAxB,CAAgCC,GAAhC,CAAqCC,MAAD,iBACnC;AAAQ,QAAA,OAAO,EAAEb,YAAjB;AAAA,kBAAgCa;AAAhC;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GArFuBrB,I;;KAAAA,I","sourcesContent":["import {useState, useContext, useEffect, useRef} from 'react'\nimport {QuizContext} from '../Helpers/Contexts'\nimport {Questions} from '../Helpers/QuestionBank'\n\nexport default function Quiz(){\n  const { score, setScore, setGameState } = useContext(QuizContext)\n  const [currQuestion, setCurrQuestion] = useState(0)\n  const imgSrc = Questions[currQuestion].image\n\n  const handleAnswer = (e) => {\n    setCurrQuestion(currQuestion + 1);\n    const optionChosen = e.target.innerText;\n    if(optionChosen === Questions[currQuestion].answer) {\n      setScore(score + 1);\n    }\n    if(currQuestion === Questions.length - 1) finishQuiz();\n  }\n\n  const finishQuiz = () => {\n    setGameState(\"result\")\n  }\n\n  // const intervalRef = useRef(null)\n  // const [timer, setTimer] = useState('00:00:00')\n\n  // function getTimeRemaining(endtime){\n  //   const total = Date.parse(endtime) - Date.parse(new Date())\n  //   const seconds = Math.floor( (total/1000)%60)\n  //   const minutes = Math.floor( (total/1000/60)%60)\n  //   const hours = Math.floor( (total/1000*60*60)%24)\n  //   const days= Math.floor( total/(1000*60*60*24))\n  //   return(\n  //     total, days, hours, minutes, seconds\n  //   )\n  // }\n\n  // function startTimer(deadline){\n  //   let { total, days, hours, minutes, seconds } = getTimeRemaining(deadline)\n  //   if(total >= 0){\n  //     setTimer(\n  //       (hours > 9 ? hours : '0'+hours) + ':' +\n  //       (minutes > 9 ? minutes : '0'+minutes) + ':' +\n  //       (seconds > 9 ? seconds : '0'+seconds)\n  //     )\n  //   }else{\n  //     clearInterval(intervalRef.current)\n  //   }\n  // }\n\n  // function clearTimer(endtime){\n  //   setTimer('00:00:10')\n  //   if(intervalRef.current) clearInterval(intervalRef.current)\n  //   const id = setInterval(()=>{\n  //     startTimer(endtime)\n  //   }, 1000)\n  //   intervalRef.current = id\n  // }\n\n  // function getDeadlineTime(){\n  //   let deadline = new Date()\n  //   deadline.setSeconds(deadline.getSeconds() + 10)\n  //   return deadline\n  // }\n\n  // useEffect(()=>{\n  //   clearTimer(getDeadlineTime())\n  //   return() => {if(intervalRef.current) clearInterval(intervalRef.current)}\n  // }, [])\n\n  // function onClickResetBtn(){\n  //   if(intervalRef.current) clearInterval(intervalRef.current)\n  //   clearTimer(getDeadlineTime())\n  // }\n\n  return(\n    <div className=\"Quiz\">\n      <div className=\"Timer\">{timer}</div>\n      <button onClick={onClickResetBtn}>Reset</button>\n      <h1 className=\"QuizText\">{Questions[currQuestion].q}</h1>\n      <div className=\"Image\">\n        <img src={imgSrc}></img>\n      </div>\n      <div className=\"Options\">\n        {Questions[currQuestion].options.map((option) => (\n          <button onClick={handleAnswer}>{option}</button>\n        ))}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}