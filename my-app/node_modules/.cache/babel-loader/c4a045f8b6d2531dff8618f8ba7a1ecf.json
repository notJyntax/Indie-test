{"ast":null,"code":"var _jsxFileName = \"/Users/jeaney/Desktop/project/JJin/indie-test/my-app/src/Components/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useEffect, useRef } from 'react';\nimport { QuizContext } from '../Helpers/Contexts';\nimport { Questions } from '../Helpers/QuestionBank';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const {\n    score,\n    setScore,\n    setGameState\n  } = useContext(QuizContext);\n  const [currQuestion, setCurrQuestion] = useState(0);\n  const imgSrc = Questions[currQuestion].image;\n\n  const handleAnswer = e => {\n    setCurrQuestion(currQuestion + 1);\n    const optionChosen = e.target.innerText;\n\n    if (optionChosen === Questions[currQuestion].answer) {\n      setScore(score + 1);\n    }\n\n    if (currQuestion === Questions.length - 1) finishQuiz();\n  };\n\n  const finishQuiz = () => {\n    setGameState(\"result\");\n  };\n\n  const intervalRef = useRef(null);\n  const [timer, setTimer] = useState('00');\n\n  function getTimeRemaining(endtime) {\n    const total = Date.parse(endtime) - Date.parse(new Date());\n    const seconds = Math.floor(total / 1000 % 60); // const minutes = Math.floor( (total/1000/60) % 60)\n    // const hours = Math.floor( (total/1000*60*60)%24)\n    // const days= Math.floor( total/ (1000*60*60*24))\n\n    return {\n      total,\n      days,\n      hours,\n      minutes,\n      seconds\n    };\n  }\n\n  function startTimer(deadline) {\n    let {\n      total,\n      seconds\n    } = getTimeRemaining(deadline);\n\n    if (total >= 0) {\n      setTimer(seconds > 9 ? seconds : '0' + seconds);\n    } else {\n      setCurrQuestion(currQuestion + 1);\n      clearInterval(intervalRef.current);\n    }\n  }\n\n  function clearTimer(endtime) {\n    setTimer('05');\n    if (intervalRef.current) clearInterval(intervalRef.current);\n    const id = setInterval(() => {\n      startTimer(endtime);\n    }, 1000);\n    intervalRef.current = id;\n  }\n\n  function getDeadlineTime() {\n    let deadline = new Date();\n    deadline.setSeconds(deadline.getSeconds() + 5);\n    return deadline;\n  }\n\n  useEffect(() => {\n    clearTimer(getDeadlineTime());\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, [currQuestion]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Quiz\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Timer\",\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"QuizText\",\n      children: Questions[currQuestion].q\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Image\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imgSrc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Options\",\n      children: Questions[currQuestion].options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAnswer,\n        children: option\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Quiz, \"kE4RdO6mV/RtA1o/Cv0hyXwrNT4=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/Users/jeaney/Desktop/project/JJin/indie-test/my-app/src/Components/Quiz.js"],"names":["useState","useContext","useEffect","useRef","QuizContext","Questions","Quiz","score","setScore","setGameState","currQuestion","setCurrQuestion","imgSrc","image","handleAnswer","e","optionChosen","target","innerText","answer","length","finishQuiz","intervalRef","timer","setTimer","getTimeRemaining","endtime","total","Date","parse","seconds","Math","floor","days","hours","minutes","startTimer","deadline","clearInterval","current","clearTimer","id","setInterval","getDeadlineTime","setSeconds","getSeconds","q","options","map","option"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,UAAlB,EAA8BC,SAA9B,EAAyCC,MAAzC,QAAsD,OAAtD;AACA,SAAQC,WAAR,QAA0B,qBAA1B;AACA,SAAQC,SAAR,QAAwB,yBAAxB;;AAEA,eAAe,SAASC,IAAT,GAAe;AAAA;;AAC5B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,MAAoCR,UAAU,CAACG,WAAD,CAApD;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAMY,MAAM,GAAGP,SAAS,CAACK,YAAD,CAAT,CAAwBG,KAAvC;;AAEA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1BJ,IAAAA,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AACA,UAAMM,YAAY,GAAGD,CAAC,CAACE,MAAF,CAASC,SAA9B;;AACA,QAAGF,YAAY,KAAKX,SAAS,CAACK,YAAD,CAAT,CAAwBS,MAA5C,EAAoD;AAClDX,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AACD,QAAGG,YAAY,KAAKL,SAAS,CAACe,MAAV,GAAmB,CAAvC,EAA0CC,UAAU;AACrD,GAPD;;AASA,QAAMA,UAAU,GAAG,MAAM;AACvBZ,IAAAA,YAAY,CAAC,QAAD,CAAZ;AACD,GAFD;;AAIA,QAAMa,WAAW,GAAGnB,MAAM,CAAC,IAAD,CAA1B;AACA,QAAM,CAACoB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC,IAAD,CAAlC;;AAEA,WAASyB,gBAAT,CAA0BC,OAA1B,EAAkC;AAChC,UAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAX,IAAsBE,IAAI,CAACC,KAAL,CAAW,IAAID,IAAJ,EAAX,CAApC;AACA,UAAME,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAaL,KAAK,GAAC,IAAP,GAAe,EAA3B,CAAhB,CAFgC,CAGhC;AACA;AACA;;AACA,WAAM;AACJA,MAAAA,KADI;AACGM,MAAAA,IADH;AACSC,MAAAA,KADT;AACgBC,MAAAA,OADhB;AACyBL,MAAAA;AADzB,KAAN;AAGD;;AAED,WAASM,UAAT,CAAoBC,QAApB,EAA6B;AAC3B,QAAI;AAAEV,MAAAA,KAAF;AAASG,MAAAA;AAAT,QAAqBL,gBAAgB,CAACY,QAAD,CAAzC;;AACA,QAAGV,KAAK,IAAI,CAAZ,EAAc;AACZH,MAAAA,QAAQ,CACLM,OAAO,GAAG,CAAV,GAAcA,OAAd,GAAwB,MAAIA,OADvB,CAAR;AAGD,KAJD,MAIK;AACHnB,MAAAA,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AACA4B,MAAAA,aAAa,CAAChB,WAAW,CAACiB,OAAb,CAAb;AACD;AACF;;AAED,WAASC,UAAT,CAAoBd,OAApB,EAA4B;AAC1BF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,QAAGF,WAAW,CAACiB,OAAf,EAAwBD,aAAa,CAAChB,WAAW,CAACiB,OAAb,CAAb;AACxB,UAAME,EAAE,GAAGC,WAAW,CAAC,MAAI;AACzBN,MAAAA,UAAU,CAACV,OAAD,CAAV;AACD,KAFqB,EAEnB,IAFmB,CAAtB;AAGAJ,IAAAA,WAAW,CAACiB,OAAZ,GAAsBE,EAAtB;AACD;;AAED,WAASE,eAAT,GAA0B;AACxB,QAAIN,QAAQ,GAAG,IAAIT,IAAJ,EAAf;AACAS,IAAAA,QAAQ,CAACO,UAAT,CAAoBP,QAAQ,CAACQ,UAAT,KAAwB,CAA5C;AACA,WAAOR,QAAP;AACD;;AAEDnC,EAAAA,SAAS,CAAC,MAAI;AACZsC,IAAAA,UAAU,CAACG,eAAe,EAAhB,CAAV;AACA,WAAM,MAAM;AAAC,UAAGrB,WAAW,CAACiB,OAAf,EAAwBD,aAAa,CAAChB,WAAW,CAACiB,OAAb,CAAb;AAAmC,KAAxE;AACD,GAHQ,EAGN,CAAC7B,YAAD,CAHM,CAAT;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBAAwBa;AAAxB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BlB,SAAS,CAACK,YAAD,CAAT,CAAwBoC;AAAlD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,6BACE;AAAK,QAAA,GAAG,EAAElC;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF,eAME;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACGP,SAAS,CAACK,YAAD,CAAT,CAAwBqC,OAAxB,CAAgCC,GAAhC,CAAqCC,MAAD,iBACnC;AAAQ,QAAA,OAAO,EAAEnC,YAAjB;AAAA,kBAAgCmC;AAAhC;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GA9EuB3C,I;;KAAAA,I","sourcesContent":["import {useState, useContext, useEffect, useRef} from 'react'\nimport {QuizContext} from '../Helpers/Contexts'\nimport {Questions} from '../Helpers/QuestionBank'\n\nexport default function Quiz(){\n  const { score, setScore, setGameState } = useContext(QuizContext)\n  const [currQuestion, setCurrQuestion] = useState(0)\n  const imgSrc = Questions[currQuestion].image\n\n  const handleAnswer = (e) => {\n    setCurrQuestion(currQuestion + 1)\n    const optionChosen = e.target.innerText\n    if(optionChosen === Questions[currQuestion].answer) {\n      setScore(score + 1)\n    }\n    if(currQuestion === Questions.length - 1) finishQuiz();\n  }\n\n  const finishQuiz = () => {\n    setGameState(\"result\")\n  }\n\n  const intervalRef = useRef(null)\n  const [timer, setTimer] = useState('00')\n\n  function getTimeRemaining(endtime){\n    const total = Date.parse(endtime) - Date.parse(new Date())\n    const seconds = Math.floor( (total/1000) % 60)\n    // const minutes = Math.floor( (total/1000/60) % 60)\n    // const hours = Math.floor( (total/1000*60*60)%24)\n    // const days= Math.floor( total/ (1000*60*60*24))\n    return{\n      total, days, hours, minutes, seconds\n  }\n  }\n\n  function startTimer(deadline){\n    let { total, seconds } = getTimeRemaining(deadline)\n    if(total >= 0){\n      setTimer(\n        (seconds > 9 ? seconds : '0'+seconds)\n      )\n    }else{\n      setCurrQuestion(currQuestion + 1)\n      clearInterval(intervalRef.current)\n    }\n  }\n\n  function clearTimer(endtime){\n    setTimer('05')\n    if(intervalRef.current) clearInterval(intervalRef.current)\n    const id = setInterval(()=>{\n      startTimer(endtime)\n    }, 1000)\n    intervalRef.current = id\n  }\n\n  function getDeadlineTime(){\n    let deadline = new Date()\n    deadline.setSeconds(deadline.getSeconds() + 5)\n    return deadline\n  }\n\n  useEffect(()=>{\n    clearTimer(getDeadlineTime())\n    return() => {if(intervalRef.current) clearInterval(intervalRef.current)}\n  }, [currQuestion])\n\n  return(\n    <div className=\"Quiz\">\n      <div className=\"Timer\">{timer}</div>\n      <h1 className=\"QuizText\">{Questions[currQuestion].q}</h1>\n      <div className=\"Image\">\n        <img src={imgSrc} />\n      </div>\n      <div className=\"Options\">\n        {Questions[currQuestion].options.map((option) => (\n          <button onClick={handleAnswer}>{option}</button>\n        ))}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}