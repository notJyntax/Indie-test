{"ast":null,"code":"var _jsxFileName = \"/Users/jeaney/Desktop/project/JJin/indie-test/my-app/src/Components/Quiz2.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useEffect, useRef } from 'react';\nimport { QuizContext } from '../Helpers/Contexts';\nimport { Questions } from '../Helpers/QuestionBank';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  // const { score, setScore, setGameState } = useContext(QuizContext)\n  // const [currQuestion, setCurrQuestion] = useState(0)\n  // const imgSrc = Questions[currQuestion].image\n  // const handleAnswer = (e) => {\n  //   setCurrQuestion(currQuestion + 1);\n  //   const optionChosen = e.target.innerText;\n  //   if(optionChosen === Questions[currQuestion].answer) {\n  //     setScore(score + 1);\n  //   }\n  //   if(currQuestion === Questions.length - 1) finishQuiz();\n  // }\n  // const finishQuiz = () => {\n  //   setGameState(\"result\")\n  // }\n  const intervalRef = useRef(null);\n  const [timer, setTimer] = useState('00:00:00');\n\n  function getTimeRemaining(endtime) {\n    const total = Date.parse(endtime) - Date.parse(new Date());\n    const seconds = Math.floor(total / 1000 % 60);\n    const minutes = Math.floor(total / 1000 / 60 % 60);\n    const hours = Math.floor(total / 1000 * 60 * 60 % 24);\n    const days = Math.floor(total / (1000 * 60 * 60 * 24));\n    return total, days, hours, minutes, seconds;\n  }\n\n  function startTimer(deadline) {\n    let {\n      total,\n      days,\n      hours,\n      minutes,\n      seconds\n    } = getTimeRemaining(deadline);\n\n    if (total >= 0) {\n      setTimer(seconds > 9 ? seconds : '0' + seconds);\n    } else {\n      clearInterval(intervalRef.current);\n    }\n  }\n\n  function clearTimer(endtime) {\n    setTimer('00:00:10');\n    if (intervalRef.current) clearInterval(intervalRef.current);\n    const id = setInterval(() => {\n      startTimer(endtime);\n    }, 1000);\n    intervalRef.current = id;\n  }\n\n  function getDeadlineTime() {\n    let deadline = new Date();\n    deadline.setSeconds(deadline.getSeconds() + 10);\n    return deadline;\n  }\n\n  useEffect(() => {\n    clearTimer(getDeadlineTime());\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, []);\n\n  function onClickResetBtn() {\n    if (intervalRef.current) clearInterval(intervalRef.current);\n    clearTimer(getDeadlineTime());\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Quiz\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Timer\",\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickResetBtn,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Quiz, \"X1Jpy7GeE+98oU+ZtLeQnfyb39U=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/Users/jeaney/Desktop/project/JJin/indie-test/my-app/src/Components/Quiz2.js"],"names":["useState","useContext","useEffect","useRef","QuizContext","Questions","Quiz","intervalRef","timer","setTimer","getTimeRemaining","endtime","total","Date","parse","seconds","Math","floor","minutes","hours","days","startTimer","deadline","clearInterval","current","clearTimer","id","setInterval","getDeadlineTime","setSeconds","getSeconds","onClickResetBtn"],"mappings":"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","sourcesContent":["import {useState, useContext, useEffect, useRef} from 'react'\nimport {QuizContext} from '../Helpers/Contexts'\nimport {Questions} from '../Helpers/QuestionBank'\n\nexport default function Quiz(){\n  // const { score, setScore, setGameState } = useContext(QuizContext)\n  // const [currQuestion, setCurrQuestion] = useState(0)\n  // const imgSrc = Questions[currQuestion].image\n\n  // const handleAnswer = (e) => {\n  //   setCurrQuestion(currQuestion + 1);\n  //   const optionChosen = e.target.innerText;\n  //   if(optionChosen === Questions[currQuestion].answer) {\n  //     setScore(score + 1);\n  //   }\n  //   if(currQuestion === Questions.length - 1) finishQuiz();\n  // }\n\n  // const finishQuiz = () => {\n  //   setGameState(\"result\")\n  // }\n\n  const intervalRef = useRef(null)\n  const [timer, setTimer] = useState('00:00:00')\n\n  function getTimeRemaining(endtime){\n    const total = Date.parse(endtime) - Date.parse(new Date())\n    const seconds = Math.floor( (total/1000)%60)\n    const minutes = Math.floor( (total/1000/60)%60)\n    const hours = Math.floor( (total/1000*60*60)%24)\n    const days= Math.floor( total/(1000*60*60*24))\n    return(\n      total, days, hours, minutes, seconds\n    )\n  }\n\n  function startTimer(deadline){\n    let { total, days, hours, minutes, seconds } = getTimeRemaining(deadline)\n    if(total >= 0){\n      setTimer(\n        (seconds > 9 ? seconds : '0'+seconds)\n      )\n    }else{\n      clearInterval(intervalRef.current)\n    }\n  }\n\n  function clearTimer(endtime){\n    setTimer('00:00:10')\n    if(intervalRef.current) clearInterval(intervalRef.current)\n    const id = setInterval(()=>{\n      startTimer(endtime)\n    }, 1000)\n    intervalRef.current = id\n  }\n\n  function getDeadlineTime(){\n    let deadline = new Date()\n    deadline.setSeconds(deadline.getSeconds() + 10)\n    return deadline\n  }\n\n  useEffect(()=>{\n    clearTimer(getDeadlineTime())\n    return() => {if(intervalRef.current) clearInterval(intervalRef.current)}\n  }, [])\n\n  function onClickResetBtn(){\n    if(intervalRef.current) clearInterval(intervalRef.current)\n    clearTimer(getDeadlineTime())\n  }\n\n  return(\n    <div className=\"Quiz\">\n      <div className=\"Timer\">{timer}</div>\n      <button onClick={onClickResetBtn}>Reset</button>\n      {/* <h1 className=\"QuizText\">{Questions[currQuestion].q}</h1>\n      <div className=\"Image\">\n        <img src={imgSrc}></img>\n      </div>\n      <div className=\"Options\">\n        {Questions[currQuestion].options.map((option) => (\n          <button onClick={handleAnswer}>{option}</button>\n        ))}\n      </div> */}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}