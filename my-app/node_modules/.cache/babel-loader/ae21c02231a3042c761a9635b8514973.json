{"ast":null,"code":"var _jsxFileName = \"/Users/jeaney/Desktop/project/JJin/indie-test/my-app/src/Components/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useEffect, useRef } from 'react';\nimport { QuizContext } from '../Helpers/Contexts';\nimport { Questions } from '../Helpers/QuestionBank';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const {\n    score,\n    setScore,\n    setGameState\n  } = useContext(QuizContext);\n  const [currQuestion, setCurrQuestion] = useState(0);\n  const imgSrc = Questions[currQuestion].image;\n\n  const handleAnswer = e => {\n    setCurrQuestion(currQuestion + 1);\n    const optionChosen = e.target.innerText;\n\n    if (optionChosen === Questions[currQuestion].answer) {\n      setScore(score + 1);\n    }\n\n    if (currQuestion === Questions.length - 1) finishQuiz();\n  };\n\n  const finishQuiz = () => {\n    setGameState(\"result\");\n  };\n\n  const interval = useRef(null);\n  const [timer, setTimer] = useState('00');\n\n  function getTimeRemaining(endtime) {\n    const total = Date.parse(endtime) - Date.parse(new Date());\n    const seconds = Math.floor(total / 1000 % 60);\n    return {\n      total,\n      seconds\n    };\n  }\n\n  function startTimer(deadline) {\n    let {\n      total,\n      seconds\n    } = getTimeRemaining(deadline);\n\n    if (total >= 0) {\n      setTimer('0' + seconds);\n    } else {\n      setCurrQuestion(currQuestion + 1);\n      clearInterval(interval.current);\n    }\n  }\n\n  function clearTimer(endtime) {\n    setTimer('05');\n    if (interval.current) clearInterval(interval.current);\n    const id = setInterval(() => {\n      startTimer(endtime);\n    }, 1000);\n    interval.current = id;\n  }\n\n  function getDeadlineTime() {\n    let deadline = new Date();\n    deadline.setSeconds(deadline.getSeconds() + 5);\n    return deadline;\n  }\n\n  useEffect(() => {\n    clearTimer(getDeadlineTime());\n    return () => {\n      if (interval.current) clearInterval(interval.current);\n    };\n  }, [currQuestion]); // function startTimeLine(sec){\n  //   timeLine = setInterval(timer, 29);\n  //   function timer(){\n  //     sec+=1;\n  //     timeLiner.style.width = sec + 'px';\n  //     if(sec > 250){\n  //       clearInterval(timeLine);\n  //       getNewQuestion();\n  //     }\n  //   }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Quiz\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"TimeBar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Timer\",\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"QuizText\",\n      children: Questions[currQuestion].q\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Image\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imgSrc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Options\",\n      children: Questions[currQuestion].options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAnswer,\n        children: option\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Quiz, \"6uTe8iGpgQ6gw1yM1lDPj3mp7kU=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/Users/jeaney/Desktop/project/JJin/indie-test/my-app/src/Components/Quiz.js"],"names":["useState","useContext","useEffect","useRef","QuizContext","Questions","Quiz","score","setScore","setGameState","currQuestion","setCurrQuestion","imgSrc","image","handleAnswer","e","optionChosen","target","innerText","answer","length","finishQuiz","interval","timer","setTimer","getTimeRemaining","endtime","total","Date","parse","seconds","Math","floor","startTimer","deadline","clearInterval","current","clearTimer","id","setInterval","getDeadlineTime","setSeconds","getSeconds","q","options","map","option"],"mappings":"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","sourcesContent":["import {useState, useContext, useEffect, useRef} from 'react'\nimport {QuizContext} from '../Helpers/Contexts'\nimport {Questions} from '../Helpers/QuestionBank'\n\nexport default function Quiz(){\n  const { score, setScore, setGameState } = useContext(QuizContext)\n  const [currQuestion, setCurrQuestion] = useState(0)\n  const imgSrc = Questions[currQuestion].image\n\n  const handleAnswer = (e) => {\n    setCurrQuestion(currQuestion + 1)\n    const optionChosen = e.target.innerText\n    if(optionChosen === Questions[currQuestion].answer) {\n      setScore(score + 1)\n    }\n    if(currQuestion === Questions.length - 1) finishQuiz();\n  }\n\n  const finishQuiz = () => {\n    setGameState(\"result\")\n  }\n\n  const interval = useRef(null)\n  const [timer, setTimer] = useState('00')\n\n  function getTimeRemaining(endtime){\n    const total = Date.parse(endtime) - Date.parse(new Date())\n    const seconds = Math.floor((total/1000)%60)\n    return { total,  seconds }\n  }\n\n  function startTimer(deadline){\n    let { total,  seconds } = getTimeRemaining(deadline)\n    if(total >= 0){\n      setTimer(\n        ('0'+seconds)\n      )\n    }else{\n      setCurrQuestion(currQuestion + 1)\n      clearInterval(interval.current)\n    }\n  }\n\n  function clearTimer(endtime){\n    setTimer('05')\n    if(interval.current) clearInterval(interval.current)\n    const id = setInterval(()=>{\n      startTimer(endtime)\n    }, 1000)\n    interval.current = id\n  }\n\n  function getDeadlineTime(){\n    let deadline = new Date()\n    deadline.setSeconds(deadline.getSeconds() + 5)\n    return deadline\n  }\n\n  useEffect(()=>{\n    clearTimer(getDeadlineTime())\n    return () => {if(interval.current) clearInterval(interval.current)}\n  }, [currQuestion])\n\n  // function startTimeLine(sec){\n  //   timeLine = setInterval(timer, 29);\n  //   function timer(){\n  //     sec+=1;\n  //     timeLiner.style.width = sec + 'px';\n  //     if(sec > 250){\n  //       clearInterval(timeLine);\n  //       getNewQuestion();\n  //     }\n  //   }\n  // }\n\n  return(\n    <div className=\"Quiz\">\n      <div className=\"TimeBar\"></div>\n      <div className=\"Timer\">{timer}</div>\n      <h1 className=\"QuizText\">{Questions[currQuestion].q}</h1>\n      <div className=\"Image\">\n        <img src={imgSrc} />\n      </div>\n      <div className=\"Options\">\n        {Questions[currQuestion].options.map((option) => (\n          <button onClick={handleAnswer}>{option}</button>\n        ))}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}